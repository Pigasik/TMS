// 1. Найти максимальное число из трех. Определить какое из трех введенных пользователем чисел максимальное и вывести его на экран.

// $s_1 = rand(-1000, 1000);
// $s_2 = rand(-1000, 1000);
// $s_3 = rand(-1000, 1000);

// echo $s_1.' '.$s_2.' '.$s_3;
// echo "<br>";

// if ($s_1 == $s_2 || $s_1 == $s_3 || $s_2 == $s_3){
//     echo "Присутствуют одинаковые значения";
// } elseif ($s_1 > $s_2 && $s_1 > $s_3){
//     echo $s_1;
// } elseif ($s_2 > $s_3){
//     echo $s_2;
// } else {
//     echo $s_3;
// };

// 2. Найти среднее число из трех. Среди трех чисел найти среднее. Если среди чисел есть равные, вывести сообщение "Ошибка".

// $s_1 = rand(-1000, 1000);
// $s_2 = rand(-1000, 1000);
// $s_3 = rand(-1000, 1000);

// echo $s_1.' '.$s_2.' '.$s_3;
// echo "<br>";

// if ($s_1 == $s_2 || $s_1 == $s_3 || $s_2 == $s_3){
//     echo "Ошибка";
// } elseif ((($s_1 > $s_2) && ($s_1 < $s_3)) || (($s_1 < $s_2) && ($s_1 > $s_3))){ 
//     echo $s_1;
// } elseif ((($s_2 > $s_1) && ($s_2 < $s_3)) || (($s_2 < $s_1) && ($s_2 > $s_3))){
//     echo $s_2;
// } else{
//     echo $s_3;
// };

// 3. Определение четверти на координатной плоскости. Требуется написать программу, определяющую по координатам точки, в какой четверти она находится. Координаты точки вводятся с клавиатуры.

// $x = rand(-1000, 1000);
// $y = rand(-1000, 1000);
// echo $x.' '.$y;
// echo "<br>";

// if ($x == 0){
//     echo "Точка расположена на оси Ох";
// } elseif ($y == 0) {
//     echo "Точка расположена на оси Оy";
// } elseif ($x > 0 && $y > 0){
//     echo "Точка расположена в I четверти";
// } elseif ($x < 0 && $y > 0){
//     echo "Точка расположена во II четверти";
// } elseif ($x < 0 && $y < 0){
//     echo "Точка расположена в III четверти";
// } else {
//     echo "Точка расположена в IV четверти";
// };

// 1. Найти все положительные элементы массива

$number = [-10, 100, -4, 0, 123, 432, 999, -145, -1050, 23, 573];
$positive = [];

foreach($number as $index){
    if ($index > 0){
        $positive[] = $index;
    }
}
var_dump($positive);

// 2. Найти элементы массива, которые больше среднеарифметического значения и вывести их ИНДЕКСЫ

$number_2 = [-2, 0, 4, 10, 13, -15, 100, 20, 99];
$sum = array_sum($number_2);
$mid = $sum/count($number_2);

for ($i = 0; $i < count($number_2); $i++){
    if($number_2[$i] > $mid){
        echo $i." ";
    }
}

// 3. Вывести элементы массива, которые больше предыдущего

$number_3 = [-12, 23, 2, -4, 5, 10];
for ($i = 1; $i < count($number_3); $i++){
    if ($number_3[$i] > $number_3[$i - 1]){
        echo $number_3[$i] . " ";
    }
}

// 4. Определить , есть ли в массиве  повторяющиеся элементы

$number_4 = [2, 0, 2, 10, 5, 10];
$array_count = array_count_values($number_4);

foreach ($array_count as $key => $val){
    if ($val > 1){
        echo $key.' ';
    } 
}

// 5. Удалить в массиве элементы, которые встречаются более двух раз

$number_5 = [2, 0, 2, 10, 5, 10, 10, 2, 9, -18, 9];
$array_count = array_count_values($number_5);
$result = [];

foreach ($array_count as $key => $value){
    if ($value < 2){
        $result[] = $key;
    }
}
print_r($result);

// 6. Определите, является ли массив двумерным

$arr = [
    "one" => [1, 2, 3, 4],
    2 => ["a", "b", "c"],
    "name" => ["Veronika", "Nik"],
    23 => 1000
];

if ((count($arr, COUNT_RECURSIVE) == count($arr))){
    echo 'Массив - одномерный';
} else {
    echo 'Массив - многомерный';
};

// 7. Вывести таблицу умножения

$x = 1;
$y = 10;

for($i = $x; $i <= $y; $i++){
    echo "Таблица умножение на ".$i.'</br>';
    for($j = $x; $j <= $y; $j++){
                echo $i." * ".$j." = ".$i*$j.'</br>';
    }
}